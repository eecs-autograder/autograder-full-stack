version: '3.7'

# This file is intended for multi-server deployment with docker swarm.

x-grader:
  &base-grader

  image: 127.0.0.1:5000/grader
  restart: unless-stopped
  build:
    context: ./autograder-server
    dockerfile: Dockerfile-grader-prod
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./autograder-server/media_root:/usr/src/app/media_root
  env_file:
    - ./autograder-server/_prod.env

services:
  nginx:
    container_name: ag-nginx
    image: 127.0.0.1:5000/nginx
    build: ./nginx/production
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/ssl:/etc/ssl
      - ./nginx/production/conf.d:/etc/nginx/conf.d
      - ./autograder-server/media_root:/protected

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.webserver == true

  website:
    image: 127.0.0.1:5000/website
    restart: unless-stopped
    build:
      context: ./ag-website-vue
      dockerfile: Dockerfile-website-prod
    container_name: ag-website
    volumes:
      - ./ag-website-vue/nginx/conf.d:/etc/nginx/conf.d

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.webserver == true

  django:
    container_name: ag-django
    image: 127.0.0.1:5000/django
    restart: unless-stopped
    build:
      context: ./autograder-server
      dockerfile: Dockerfile-django-prod
    volumes:
      - ./autograder-server/media_root:/usr/src/app/media_root
    # UPDATE set --workers=xx to your desired number of workers. Remove the flag
    # to use gunicorn's default behavior.
    command: gunicorn --workers=4 autograder.wsgi:application --bind 0.0.0.0:8000 --error-logfile=- --access-logfile=- --timeout 120
    env_file:
      - ./autograder-server/_prod.env
    environment:
      USE_NGINX_X_ACCEL: 'true'

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.django_app == true

  postgres:
    container_name: ag-postgres
    restart: unless-stopped
    image: postgres:9.5
    volumes:
      - pgdata:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: 'postgres' # UPDATE THIS

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.database == true

  redis:
    container_name: ag-redis
    restart: unless-stopped
    image: redis:latest
    volumes:
      - redisdata:/data

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.cache == true

  rabbitmq:
    container_name: ag-rabbitmq
    image: 127.0.0.1:5000/rabbitmq
    restart: unless-stopped
    build: ./rabbitmq
    hostname: rabbit
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.rabbitmq_broker == true

  celery_small_tasks:
    container_name: ag-celery-small-tasks
    image: 127.0.0.1:5000/celery_small_tasks
    restart: unless-stopped
    build:
      context: ./autograder-server
      dockerfile: Dockerfile-django-prod
    volumes:
      - ./autograder-server/media_root:/usr/src/app/media_root
    command: /usr/local/bin/celery worker -c 4 -A autograder -l info -Q small_tasks -n small_tasks@%h
    env_file:
      - ./autograder-server/_prod.env

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.small_tasks == true

  celery_project_downloads:
    container_name: ag-celery-project-downloads
    image: 127.0.0.1:5000/celery_project_downloads
    restart: unless-stopped
    build:
      context: ./autograder-server
      dockerfile: Dockerfile-django-prod
    volumes:
      - ./autograder-server:/usr/src/app
    command: /usr/local/bin/celery worker -c 2 -A autograder -l info -Q project_downloads -n project_downloads@%h
    env_file:
      - ./autograder-server/_prod.env

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.small_tasks == true

  celerybeat:
    container_name: ag-celerybeat
    image: 127.0.0.1:5000/celerybeat
    restart: unless-stopped
    build:
      context: ./autograder-server
      dockerfile: Dockerfile-django-prod
    volumes:
      - ./autograder-server/media_root:/usr/src/app/media_root
    command: /usr/local/bin/celery worker --beat -c 1 -A autograder -l info -Q periodic_tasks -n periodic_tasks@%h
    env_file:
      - ./autograder-server/_prod.env

    # environment:
        # AG_SUBMISSION_LISTENER_INTERVAL:
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.small_tasks == true

  grader:
    <<: *base-grader
    container_name: ag-grader
    command: /usr/local/bin/celery -A autograder worker -n submission_grader@%h --loglevel=info -c 2

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.grader == true

  tiny_grader:
    <<: *base-grader
    container_name: ag-tiny-grader
    command: /usr/local/bin/celery -A autograder worker -n submission_grader@%h --loglevel=info -c 1

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.tiny_grader == true

  fast_grader:
    <<: *base-grader
    container_name: ag-fast-grader
    command: /usr/local/bin/celery -A autograder worker -n fast_submission_grader@%h --loglevel=info -c 2

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.fast_grader == true

  tiny_fast_grader:
    <<: *base-grader
    container_name: ag-tiny-fast-grader
    command: /usr/local/bin/celery -A autograder worker -n fast_submission_grader@%h --loglevel=info -c 1

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.tiny_fast_grader == true

  deferred_grader:
    <<: *base-grader
    container_name: ag-deferred-grader

    # We'll keep "-Q deferred" for now in case there are tasks in that queue
    # when we deploy
    command: /usr/local/bin/celery -A autograder worker -Q deferred -n deferred@%h --loglevel=info -c 2

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.deferred_grader == true

  tiny_deferred_grader:
    <<: *base-grader
    container_name: ag-tiny-deferred-grader

    command: /usr/local/bin/celery -A autograder worker -Q deferred -n deferred@%h --loglevel=info -c 1

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.tiny_deferred_grader == true

  rerun_grader:
    <<: *base-grader
    container_name: ag-rerun-grader

    # We'll keep "-Q rerun" for now in case there are tasks in that queue
    # when we deploy
    command: /usr/local/bin/celery -A autograder worker -Q rerun -n rerun@%h --loglevel=info -c 2

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.rerun_grader == true

  tiny_rerun_grader:
    <<: *base-grader
    container_name: ag-tiny-rerun-grader

    command: /usr/local/bin/celery -A autograder worker -Q rerun -n rerun@%h --loglevel=info -c 1

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.tiny_rerun_grader == true

  image_builder:
    <<: *base-grader
    container_name: ag-image-builder

    command: /usr/local/bin/celery -A autograder worker -Q build_sandbox_image -n image_builder@%h --loglevel=info -c 1

    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.image_builder == true

  sandboximageregistry:
    image: registry:2
    container_name: ag-sandbox-image-registry
    restart: unless-stopped

    environment:
      REGISTRY_HTTP_ADDR: '0.0.0.0:5001'

    ports:
      - "5001:5001"

    volumes:
      - sandbox_image_registry_data:/var/lib/registry

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.custom_image_registry == true

networks:
  default:
    external:
      name: ag-swarm-network

volumes:
  redisdata: {}
  pgdata: {}
  rabbitmqdata: {}
  sandbox_image_registry_data: {}
